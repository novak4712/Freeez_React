import React, {useContext, useState} from "react";
import {Link} from "react-router-dom";
import ReactPageScroller from 'react-page-scroller';

import ScrollTip from 'components/ScrollTip'
import PageLink from "components/PageLink";
import {CurrentThemeContext} from "contexts/currentTheme";


import styles from './Portfolio.module.scss'


const Portfolio = () => {
    const [currentThemeState] = useContext(CurrentThemeContext);
    const [currentPage, setCurrentPage] = useState(null);
    const portfolioItem = ['work-1', "work-2", "work-3", "work-4", 'work-5', "work-6", "work-7", "work-8", 'work-9', "work-10", "work-11", "work-12"];
    const data = subArray(portfolioItem, 4);
    const sections = ['2D GRAPHICS', '3D GRAPHICS', 'MOTION GRAPHICS', 'CONCEPT ART', 'GAME DESIGN'];
    const handlePageChange = (number) => {
        setCurrentPage(number)
    };
    return (
        <div className={`${styles.portfolioWrapper} ${currentThemeState.isLight ? styles.light : styles.dark}`}>
            <ScrollTip currentPage={currentPage} length={data.length}/>
            {sections && <PortfolioSections data={sections}/>}
            <ReactPageScroller
                containerWidth='100%'
                containerHeight={`calc(100% - 36px)`}
                transitionTimingFunction='ease-in-out'
                pageOnChange={handlePageChange}
            >
                {data.map((item, idx) => {
                    return (
                        <div className={styles.portfolio} key={`item-${idx}`}>
                            {item.map((item, idx) => {
                                return (
                                    <div className={styles.portfolioItemWrapper} key={`${item}-${idx}`}>
                                        <Link to={`/portfolio/${item}`}
                                              className={`${styles.portfolioItem}`}>
                                            {item}
                                        </Link>
                                        <Link to={`/portfolio/${item}`}
                                              className={`${styles.portfolioItemText}`}>
                                            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Debitis explicabo
                                            incidunt unde voluptatem. Aspernatur dicta dolores est eum minima optio quia
                                            quos similique veniam vitae! Est inventore iure quo ut.
                                            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Debitis explicabo
                                            incidunt unde voluptatem. Aspernatur dicta dolores est eum minima optio quia
                                            quos similique veniam vitae! Est inventore iure quo ut.
                                        </Link>
                                    </div>
                                )
                            })}
                        </div>
                    )

                })}

            </ReactPageScroller>
            <PageLink text='MAIN' url='/'/>
        </div>

    )
};

const PortfolioSections = ({data}) => {
    const dataSection = subArray(data, 3);

    return (
        <div className={styles.portfolioSections}>
            {dataSection.map((item, idx)=>{
                if(idx === 5){
                    return;
                }
                return(
                    <div className={styles.sectionWrapper} key={`section-${idx}`}>
                        {item.map((item,idx)=>{
                            return(
                                <div  className={styles.section} key={`${item}-${idx}`}>
                                    {item}
                                </div>
                            )
                        })}
                    </div>
                )
            })}
        </div>
    )
};

const subArray = (array, sizeArray) => {
    let arr = array; //массив, можно использовать массив объектов
    let size = sizeArray; //размер подмассива
    let subarray = []; //массив в который будет выведен результат.
    for (let i = 0; i < Math.ceil(arr.length / size); i++) {
        subarray[i] = arr.slice((i * size), (i * size) + size);
    }
    return subarray;
};


export default Portfolio;