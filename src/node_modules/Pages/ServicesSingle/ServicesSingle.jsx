import React, {useContext} from "react";

import {CurrentThemeContext} from "contexts/currentTheme";

import styles from './ServicesSingle.module.scss'
import PageLink from "components/PageLink";
import ButtonFreeez from "components/ButtonFreeez";

const ServiceSingle = () => {
    const [currentThemeState] = useContext(CurrentThemeContext);
    const data = [
        {
            name: 'LANDING PAGE PROTOTYPE',
            duration: '7+ DAYS',
            price: '149 $',
            member_price: '119 $',
            align: 'left',
            content: ['Marketing research, competitor analysis', 'Custom script development', 'Building a block structure of the site', 'Building an information structure', 'Introducing interactivity'],
        },
        {
            name: 'WEBSITE PROTOTYPE',
            duration: '21+ DAYS',
            price: '249 $',
            member_price: null,
            align: 'right',
            content: ['We carefully consider the location of the main block and elements on the site, competitor analysis', 'WE organize the site navigation system', 'We think through user interaction with the site'],
        }
    ]
    return (
        <div className={`${styles.servicesSingleWrapper} ${currentThemeState.isLight ? styles.light : styles.dark}`}>
            <div className={styles.servicesSingle}>
                <div className={styles.servicesSingleHeader}>
                    <div className={styles.headerButton}>
                        PROTOTYPING
                    </div>
                    <div className={styles.headerText}>
                        LITERALLY FUTURE FOR YOU WEBSITE
                    </div>
                </div>
                <div className={styles.servicesSingleText}>
                    Landing prototype is necessary to get a complete picture of the page structure before development
                    begins.<br/><br/>

                    This allows the designer to familiarize themselves with the information necessary on the site in
                    advance,<br/>
                    and also reduces the likelihood of improvements during the implementation of the project, because
                    all the elements and structure of the project are agreed and fixed in advance.
                </div>
                <div
                    className={styles.servicesSingleCarts}>
                    {data.map((item, idx) => <Cart data={item} key={`cart-${idx}`}/>)}
                </div>
            </div>
            <PageLink text='BACK' url='/services'/>
        </div>
    )
}


const Cart = ({data}) => {
    const {name, align, duration, price, member_price, content} = data;

    return (
        <div className={styles.cartItemWrapper}>
            <div className={`${styles.cartItem} ${(align === 'left') ? styles.left : styles.right}`}>
                <div className={styles.header}>
                    <div className={styles.name}>
                        {name}
                    </div>
                    <div className={styles.duration}>
                        {duration}
                    </div>
                    <div className={styles.price}>
                        {price}
                    </div>
                </div>
                <div className={`${styles.memberPriceWrapper} ${member_price ? styles.viz : styles.notViz}`}>
                    <div className={styles.memberPriceHr}>{name}</div>
                    <div className={styles.memberPriceText}>MEMBER PRICE</div>
                    <div className={styles.memberPriceValue}>{member_price}</div>
                </div>
                <div className={styles.cartContentWrapper}>
                    <ul>
                        {content.map((item, idx) => (
                            <li className={styles.cartContentItem} key={`${item}-${idx}`}>{item}</li>
                        ))}
                    </ul>
                </div>
            </div>
            <ButtonFreeez text='ADD TO SHOPPING BAG' close='Plus' theme='dark' width='300px' align='left'/>
        </div>
    )
}

export default ServiceSingle;