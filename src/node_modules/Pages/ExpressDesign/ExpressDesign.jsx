import React, {useContext, useState, useEffect} from "react";

import {CurrentThemeContext} from "contexts/currentTheme";
import ServicesItem from 'components/ServicesItem'

import styles from './ExpressDesign.module.scss'
import ButtonFreeez from "components/ButtonFreeez";
import SectionName from "components/SectionName";
import useFetch from "hooks/useFetch";


const ExpressDesign = () => {
    const [currentThemeState] = useContext(CurrentThemeContext);
    const [total, setTotal] = useState([]);
    const lang = currentThemeState.isLang === 'ru' ? 22 : 19;
    const totalButton = currentThemeState.isLang === 'ru' ? 'ПЕРЕЙТИ К ОПЛАТЕ' : 'PROCEED TO CHECKOUT';
    const apiUrl = `/wp-json/wp/v2/express_design?language=${lang}&per_page=100`;
    const [{response, isLoading}, doFetch] = useFetch(apiUrl);
    let data = [];

    useEffect(() => {
        doFetch()
    }, [doFetch, lang])

    if (response) {
        let category = [];
        response.map(item => category.push(item.categories));
        category = [...new Set(category.flat(Infinity))];
        category.sort(function (a, b) {
            return a - b;
        });
        data = category.map(item => {
            let section = item;
            let content = response.filter(el => el.categories.includes(item))
            return {
                section,
                content
            }
        })

    }


    const handleClick = (service) => {
        if (!total.includes(service)) {
            setTotal([...total, service])
        } else {
            setTotal(total.filter(item => item.id !== service.id))
        }
    }

    const totalHandlerClick = (service) => {
        setTotal(total.filter(item => item.id !== service.id))
    }

    return (
        <div className={`${styles.expressDesignWrapper} ${currentThemeState.isLight ? styles.light : styles.dark}`}>
            <div className={styles.expressDesign}>
                {(isLoading) ? <div>Loading...</div> :
                    data.map((item, idx) => {
                        return (
                            <div className={`${styles.column} ${styles.onceColumn}`} key={`item-${idx}`}>
                                <ItemsColumn data={item} handleClick={handleClick} total={total}/>
                            </div>
                        )
                    })
                }
                <div className={`${styles.column} ${styles.onceColumn} ${styles.columnRight}`}>
                    <div className={`${styles.column} ${styles.totalColumn}`}>
                        <div className={styles.headerColumn}>
                            <div className={styles.nameColumn}>
                                total
                            </div>
                        </div>
                        <div className={styles.contentWrapper}>
                            <div className={styles.scrollContent}>
                                {
                                    total.map((item) => {
                                        return (
                                            <ServicesItem data={item} key={item.id} total={true}
                                                          handleClick={totalHandlerClick} collapse={false}/>
                                        )
                                    })
                                }
                            </div>
                        </div>
                        <div className={styles.buttonWrapper}>
                            <ButtonFreeez text={totalButton} theme='dark' width='100%' align='center'/>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
};

const ItemsColumn = ({data, handleClick, total}) => {
    const {section, content} = data;
    const getTotal = (item) =>{
        if(total){
            return total.includes(item)
        }
    }

    return (
        <div className={styles.itemsColumn}>
            <div className={styles.headerColumn}>
                <div className={styles.nameColumn}>
                   <SectionName id={section}/>
                </div>
            </div>
            <div className={styles.contentWrapper}>
                <div className={styles.scrollContent}>
                    {
                        content.map((item) => {
                            return (
                                <ServicesItem data={item} key={item.id} handleClick={handleClick}
                                              total={()=>getTotal(item)} collapse={true}/>
                            )
                        })
                    }
                </div>
            </div>
        </div>
    )
}

export default ExpressDesign;
