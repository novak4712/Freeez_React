import React, {useContext} from "react";
import {Link} from 'react-router-dom'
import {CurrentThemeContext} from 'contexts/currentTheme'

import styles from './ButtonFreeez.module.scss'

const ButtonFreeez = ({text, close, theme, width, align, url}) => {
    const [currentThemeState] = useContext(CurrentThemeContext);
    let themeButton = theme;
    if (currentThemeState.isLight) {
        themeButton = themeButton === 'dark' ? 'light' : 'dark'
    }


    return (
        <React.Fragment>
            {(url) ? <ButtonLink text={text} close={close} themeButton={themeButton} width={width} align={align}
                                 url={url}/> :
                <Button text={text} close={close} themeButton={themeButton} width={width} align={align}/>}
        </React.Fragment>
    )
};
const Button = ({text, close, themeButton, width, align}) => {
    return (
        <button
            className={`${themeButton === 'light' ? styles.ButtonFreezLight : styles.ButtonFreezDark} ${close ? styles.isClose : ''}`}
            style={{width: width, textAlign: align}}>
            {text && text}
            {close && <CloseButton close={close} className={styles.closeButton}/>}
        </button>
    )
};

const ButtonLink = ({text, close, themeButton, width, align, url}) => {
    return (
        <Link to={url}
           className={`${themeButton === 'light' ? styles.ButtonFreezLight : styles.ButtonFreezDark} ${close ? styles.isClose : ''}`}
           style={{width: width, textAlign: align}}>
            {text && text}
            {close && <CloseButton close={close} className={styles.closeButton}/>}
        </Link>
    )
};

const CloseButton = ({close}) => {
    const className = (close === 'Plus' ? styles.closeButtonPlus : styles.closeButtonCross);
    return (
        <span className={className}>
          <span> </span>
            <span> </span>
        </span>
    )
};

export default ButtonFreeez